// Portions of the code are licensed under the BSD 3-Clause License:
// Copyright (c) 2000-2017 Chih-Chung Chang and Chih-Jen Lin
// All rights reserved.

// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:

// 1. Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.

// 2. Redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution.

// 3. Neither name of copyright holders nor the names of its contributors
// may be used to endorse or promote products derived from this software
// without specific prior written permission.


// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Relicensed under the MIT:
// Algorithm::LibSVM -- A Perl 6 bindings for libsvm
//  Copyright(C) 2017 titsuki <titsuki@cpan.org>
// For more details, see the "LICENSE" file.
--- ../libsvm-322/svm.cpp	2016-12-22 04:09:27.000000000 +0900
+++ src/svm.cpp	2019-03-16 16:38:25.231667587 +0900
@@ -246,7 +246,10 @@
 	}
 	double kernel_precomputed(int i, int j) const
 	{
-		return x[i][(int)(x[j][0].value)].value;
+		const struct svm_node *ptr;
+		int counter = (int)x[j]->value;
+		ptr = x[i]; while (counter-- > 0) ptr = ptr->next;
+		return ptr->value;
 	}
 };
 
@@ -299,15 +302,15 @@
 		if(px->index == py->index)
 		{
 			sum += px->value * py->value;
-			++px;
-			++py;
+			px = px->next;
+			py = py->next;
 		}
 		else
 		{
 			if(px->index > py->index)
-				++py;
+				py = py->next;
 			else
-				++px;
+				px = px->next;
 		}			
 	}
 	return sum;
@@ -331,20 +334,20 @@
 				{
 					double d = x->value - y->value;
 					sum += d*d;
-					++x;
-					++y;
+					x = x->next;
+					y = y->next;
 				}
 				else
 				{
 					if(x->index > y->index)
 					{	
 						sum += y->value * y->value;
-						++y;
+						y = y->next;
 					}
 					else
 					{
 						sum += x->value * x->value;
-						++x;
+						x = x->next;
 					}
 				}
 			}
@@ -352,13 +355,13 @@
 			while(x->index != -1)
 			{
 				sum += x->value * x->value;
-				++x;
+				x = x->next;
 			}
 
 			while(y->index != -1)
 			{
 				sum += y->value * y->value;
-				++y;
+				y = y->next;
 			}
 			
 			return exp(-param.gamma*sum);
@@ -366,7 +369,11 @@
 		case SIGMOID:
 			return tanh(param.gamma*dot(x,y)+param.coef0);
 		case PRECOMPUTED:  //x: test (validation), y: SV
-			return x[(int)(y->value)].value;
+		{
+			int counter = (int)(y->value);
+			while (counter-- > 0) x = x->next;
+			return x->value;
+		}
 		default:
 			return 0;  // Unreachable 
 	}
@@ -2729,7 +2736,7 @@
 			while(p->index != -1)
 			{
 				fprintf(fp,"%d:%.8g ",p->index,p->value);
-				p++;
+				p = p->next;
 			}
 		fprintf(fp, "\n");
 	}
@@ -2975,7 +2982,7 @@
 				break;
 			x_space[j].index = (int) strtol(idx,&endptr,10);
 			x_space[j].value = strtod(val,&endptr);
-
+			x_space[j].next = &x_space[j + 1];
 			++j;
 		}
 		x_space[j++].index = -1;
@@ -3039,8 +3046,11 @@
 
 void svm_destroy_param(svm_parameter* param)
 {
-	free(param->weight_label);
-	free(param->weight);
+	if(param != NULL)
+	{
+		free(param->weight_label);
+		free(param->weight);
+	}
 }
 
 const char *svm_check_parameter(const svm_problem *prob, const svm_parameter *param)
@@ -3179,3 +3189,8 @@
 	else
 		svm_print_string = print_func;
 }
+
+void svm_set_srand(int seed)
+{
+	srand(seed);
+}
